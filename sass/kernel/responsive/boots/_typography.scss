@import "../functions/responsive";

$font-weight : '';
$letter-spacing:letter-space;
.font-weight-black{
    font-weight: 900;
}
.font-weight-extra-bold{
    font-weight: 800;
}
.font-weight-bold{
    font-weight: 700;
}
.font-weight-semi-bold{
    font-weight: 600;
}
.font-weight-medium{
    font-weight: 500;
}
.font-weight-regular{
    font-weight: 400;
}
.font-weight-light{
    font-weight: 300;
}
.font-weight-extra-light{
    font-weight: 200;
}
.font-weight-thin{
    font-weight: 100;
}
@function font-weight-connection($weight){
    $list : 0;
    @if ($weight == "black"){$list: 900;}
    @else if ($weight == "extra-bold"){$list: 800;}
    @else if ($weight == "bold"){$list: 700;}
    @else if ($weight == "semi-bold"){$list: 600;}
    @else if ($weight == "medium"){$list: 500;}
    @else if ($weight == "regular"){$list: 400;}
    @else if ($weight == "light"){$list: 300;}
    @else if ($weight == "extra-light"){$list: 200;}
    @else if ($weight == "thin"){$list: 100;}

    @return $list;
}
@mixin make-font-face{
    @each $font-name , $font-details in $fonts {
      $font-folder: map-get($font-details, "folder");
      @each $font-type, $font-files in map-get($font-details, "font-types") {
        $font-weight : font-weight-connection($font-type);
         @font-face {
            $file-src : '';
            font-family: "#{$font-name}";
            font-weight: $font-weight;
            @each $font-file in $font-files {
              $file-name: nth($font-file, 1);
              $file-format: str-slice($file-name, str-index($file-name, ".") + 1);
              $file-path: $font-folder + "/" + $file-name;
              $file-src :$file-src + #{url("#{$fonts-path + $file-path}")} + ",";
            }
            src: unquote($file-src);
          }
      }
      .font-#{$font-name}{
        font-family : $font-name;
      }
    }
}
@function generate-text-style($text-property , $text-value , $map-config){
    $is-responsive: check-status($map-config , responsive);
    $list : ();
    $base : ();
    @if ($is-responsive){
        @each $key,$value in $break-points{
            @each $name in $text-value{
                $base:generate-classes-responsive-on-value($font-prefix , $key , $name);
                $map:(
                    className: $base,
                    propertyKeys:'#{$text-property}',
                    propertyValues:$name
                );
                $list:append($list , $map);
            }
        }
    }
    @else{
        @each $name in $text-value{
            $base:generate-classes-on-value($font-prefix , $name);
            $map:(
                className: $base,
                propertyKeys:'#{$text-property}',
                propertyValues:$name
            );
            $list:append($list , $map);
        }
    }
    @return $list;
}

$font-size-responsive : generate-typography-size-classes($font-size, $font-prefix);
$generate-text-align : generate-text-style(text-align , $text-align , $conf-text-align);
$generate-text-transform : generate-text-style(text-transform , $text-transform , $conf-text-transform);
$generate-text-decoration-line : generate-text-style(text-decoration-line , $text-decoration-line , $conf-text-decoration);
$generate-text-decoration-style : generate-text-style(text-decoration-style , $text-decoration-style , $conf-text-decoration);
$generate-font-style : generate-text-style(font-style , $font-style , $conf-font-style);
$letter-space:generate-classes-items($letter-spacing,letter-spacing,$conf-letter-spacing);
@include make-font-face;