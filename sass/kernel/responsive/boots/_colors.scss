@mixin detect-color--palette(
  $keyword,
  $key-palette-color,
  $value-palette-color
) {
  @if ($keyword==$borders) {
    $result : str-replace("border-#{$key-palette-color}-color","-border","");
    .#{$result} {
      border-color: $value-palette-color;
    }
  }

  @if ($keyword==$backgrounds) {
    $result : str-replace("bg-#{$key-palette-color}-color","-background","");
    .#{$result} {
      background-color: $value-palette-color;
    }
  }

  @if ($keyword==$colors) {
    .#{$key-palette-color}-color {
      color: $value-palette-color;
    }
  }
}

@mixin compare-palette-key($key-palette-color, $value-palette-color, $keyword) {
  @for $i from 1 through length($keyword) {
    $item-list: nth($keyword, $i);
    @if (str-index(#{$key-palette-color}, $item-list)) {
      @include detect-color--palette(
        $keyword,
        $key-palette-color,
        $value-palette-color
      );
    }
  }
}
@mixin generate-color-classes($palette) {
  @each $key, $value in $palette {
    @include compare-palette-key($key, $value, $borders);
    @include compare-palette-key($key, $value, $colors);
    @include compare-palette-key($key, $value, $backgrounds);
  }
}

@include generate-color-classes($color-palette);
