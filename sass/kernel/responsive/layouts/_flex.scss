@import "../functions/responsive";

.row{
    width: 100%;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}
$col-list:col;
$grow-list:grow;
$conf-list:(
    flex-direction:map.get($conf-flex-direction , responsive) ,
    justify-content:map.get($conf-justify-content , responsive) ,
    justify-self:map.get($conf-justify-self , responsive) ,
    justify-items:map.get($conf-justify-items , responsive) , 
    align-content:map.get($conf-align-content , responsive) , 
    align-self:map.get($conf-align-self , responsive) , 
    align-items:map.get($conf-align-items , responsive) , 
    flex-wrap:map.get($conf-wrap,responsive),
);
$flex-direction-value-list:(row , row-reverse , column , column-reverse);
$justify-content-value-list:(flex-start , center , flex-end , start , end , space-between , space-around , space-evenly);
$justify-self-value-list:(start , center , end ,  left , right , stretch);
$justify-items-value-list:(start , center , end ,  left , right , stretch);
$align-content-value-list:(flex-start , center , flex-end , start , end , space-between , space-around , space-evenly);
$align-self-value-list:(flex-start , center , flex-end , start , end , baseline , stretch);
$align-items-value-list:(flex-start , center , flex-end , stretch , start , end , baseline);
$flex-wrap-value-list:(wrap,nowrap);
$value-list:(
    $flex-direction-value-list ,
    $justify-content-value-list ,
    $justify-self-value-list ,
    $justify-items-value-list ,
    $align-content-value-list ,
    $align-self-value-list ,
    $align-items-value-list ,
    $flex-wrap-value-list,
);
$key-list:(
    flex-direction ,
    justify-content ,
    justify-self ,
    justify-items ,
    align-content ,
    align-self ,
    align-items ,
    flex-wrap,
);

$class-list:(
    flex ,
    justify-content ,
    justify-self ,
    justify-items ,
    align-content ,
    align-self ,
    align-items ,
    flex,
);

@function generate-flex-list(){
    $flex-list:();

    @for $i from 1 through length($key-list){
        $value:generate-flex-classes(nth($key-list , $i), nth($value-list , $i),nth($class-list,$i));
        $flex-list:join($flex-list , $value);
    }
    @return $flex-list;
}

@function generate-flex-classes($property-key-list , $property-value-list,$class-name){
    $list : ();
    $count : ();
    @if check-status($conf-list, $property-key-list){
        @each $key , $value in $break-points{
            $list:join($list , get-flex-break-points-classes($key,$property-key-list , $property-value-list,$class-name));
        }
    }@else{
        $list:join($list , get-flex-break-points-classes(null,$property-key-list , $property-value-list,$class-name));   
    }  
    @return $list;
} 

@function get-flex-break-points-classes($break-points-key,$property-key-list , $property-value-list,$class-name){
    $list : ();
    $base : ();
    @for $i from 1 through length($property-value-list){
        @if check-status($conf-list, $property-key-list){
            $base:generate-classes-responsive-on-value($class-name , $break-points-key , nth($property-value-list , $i));
        }@else{
            $base:generate-classes-on-value($class-name  ,nth($property-value-list , $i));
        }
        $map:(
            className: $base,
            propertyKeys:$property-key-list,
            propertyValues:nth($property-value-list , $i)
        );
        $list:append($list , $map);
    }
    @return $list;
}



$flex-cols : generate-classes-items($col-list ,width, $conf-cols) ;
$flex-grows:generate-classes-items($grow-list,flex,$conf-grows);
$flex-type : generate-flex-list();