$paddings-list:p,pt,pb,pl,pr,px,py;
$margins-list:m,mt,mb,ml,mr,mx,my;
$gap-list:gap;

$map-padding:(p:padding , pt:padding-top , pb:padding-bottom , pl:padding-left , pr:padding-right , px:(padding-left , padding-right) , py:(padding-top , padding-bottom));
$map-margin:(m:margin , mt:margin-top , mb:margin-bottom , ml:margin-left , mr:margin-right , mx:(margin-left , margin-right) , my:(margin-top , margin-bottom));
$map-gap:(gap:gap);

@function generate-class-name-list($name-list, $map-config) {
    $is-responsive: check-status($map-config , responsive);
    $class-name-list: ();
    $count:map.get($map-config , count) + 1;

    @if ($count == 1){
        @return ();
    }
    @if($is-responsive) {
        @for $i from 1 through length($name-list){
            $class-name-list: list.join($class-name-list, generate-responsive-classes(nth($name-list , $i) , $count, true , true));
          }
    }

    @else {
        @for $i from 1 through length($name-list){
            $class-name-list: list.join($class-name-list, generate-classes(nth($name-list , $i) , $count , true));
        }
    }
    @return $class-name-list;
}

@function generate-key($name , $map-property){
    $split-dot:string.split($name , ".");
    $split-class:string.split(nth($split-dot , length($split-dot)) , "-");
    $prefix:nth($split-class , 1);
    $key:map.get($map-property , $prefix);
    @return $key;
}

@function generate-value($name , $map-config , $map-property){
    $factor:map.get($map-config , factor);
    $unit:map.get($map-config , unit);
    $key:generate-key($name , $map-property);
    $split-class:string.split($name , "-");
    $number:nth($split-class , length($split-class));
    $value:$factor * cast-string-number($number);
    $value:$value + $unit;
    $value-list:();

    @if type-of($key) == list{
        @for $i from 1 through length($key){
            $value-list:list.append($value-list,$value , comma);
        }
        @return $value-list;
    }
    @return $value;
}

@function generate-total-map-list($name-list , $map-property , $map-config){
    $list:();
    $map:();
    $class-name-list:generate-class-name-list($name-list, $map-config);
    @if length($class-name-list) == 0 {
        @return ();
    }
    @for $i from 1 through length($class-name-list){
        $class-item:nth($class-name-list , $i);
        $map:(
            className:$class-item,
            propertyKeys:generate-key($class-item , $map-property),
            propertyValues:generate-value($class-item , $map-config , $map-property)
        );
        $list:append($list , $map , comma);
    }
    @return $list;
}

$p : generate-total-map-list($paddings-list , $map-padding , $conf-paddings);
$m : generate-total-map-list($margins-list , $map-margin , $conf-margins);
$gaps : generate-total-map-list($gap-list , $map-gap , $conf-gaps);