@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use "../functions/responsive" as *;
@use "../../../structure/typography" as *;
@use "../../../config/responsive" as *;
@use "../../../config/paths" as *;


$font-weight : '';
.font-weight-black{
    font-weight: 900;
}
.font-weight-extra-bold{
    font-weight: 800;
}
.font-weight-bold{
    font-weight: 700;
}
.font-weight-semi-bold{
    font-weight: 600;
}
.font-weight-medium{
    font-weight: 500;
}
.font-weight-regular{
    font-weight: 400;
}
.font-weight-light{
    font-weight: 300;
}
.font-weight-extra-light{
    font-weight: 200;
}
.font-weight-thin{
    font-weight: 100;
}
@function font-weight-connection($weight){
    $list : 0;
    @if ($weight == "black"){$list: 900;}
    @else if ($weight == "extra-bold"){$list: 800;}
    @else if ($weight == "bold"){$list: 700;}
    @else if ($weight == "semi-bold"){$list: 600;}
    @else if ($weight == "medium"){$list: 500;}
    @else if ($weight == "regular"){$list: 400;}
    @else if ($weight == "light"){$list: 300;}
    @else if ($weight == "extra-light"){$list: 200;}
    @else if ($weight == "thin"){$list: 100;}

    @return $list;
}
@mixin make-font-face{
    @each $font-name , $font-details in $fonts {
      $font-folder: map.get($font-details, "folder");
      $font-default: map.get($font-details, "defaults");
      @each $font-type, $font-files in map.get($font-details, "font-types") {
        $font-weight : font-weight-connection($font-type);
         @font-face {
            $file-src : '';
            font-family: $font-name;
            font-weight: $font-weight;
            @each $font-file in $font-files {
              $file-name: list.nth($font-file, 1);
              $file-format: string.slice($file-name, string.index($file-name, ".") + 1);
              $file-path: $font-folder + "/" + $file-name;
              $file-src :$file-src + #{url("#{$fonts-path + $file-path}")} + ",";
            }
            src: string.unquote($file-src);
          }
      }
      .font-#{$font-name}{
        font-family: $font-name , string.unquote($font-default);
      }
    }
}
@function generate-text-style($property , $value , $class){
    $list : ();
    $base : ();
    @each $name in $value{
        $base:generate-classes-on-value(($font-prefix + "-" + $class) , $name);
        $map:(
            className: $base,
            propertyKeys:'#{$property}',
            propertyValues:$name
        );
        $list:list.append($list , $map);
    }
    @return $list;
}

$font-size-responsive : generate-typography-size-classes($font-size, $font-prefix);
$generate-text-align : generate-text-style(text-align , $text-align , align);
$generate-text-transform : generate-text-style(text-transform , $text-transform , transform);
$generate-text-decoration-line : generate-text-style(text-decoration-line , $text-decoration-line , decoration);
$generate-text-decoration-style : generate-text-style(text-decoration-style , $text-decoration-style , decoration-style);
$generate-font-style : generate-text-style(font-style , $font-style , style);

@include make-font-face;