@use "sass:list";
@use "sass:string";
@use "../../../config/colors";
@use "responsive";

@mixin detect-color--palette(
  $keyword,
  $key-palette-color,
  $value-palette-color
) {
  @if ($keyword==colors.$borders) {
    $result : responsive.str-replace("border-#{$key-palette-color}-color","-border","");
    .#{$result} {
      border-color: $value-palette-color;
    }
  }

  @if ($keyword==colors.$backgrounds) {
    $result : responsive.str-replace("bg-#{$key-palette-color}-color","-background","");
    .#{$result} {
      background-color: $value-palette-color;
    }
  }

  @if ($keyword==colors.$colors) {
    .#{$key-palette-color}-color {
      color: $value-palette-color;
    }
  }
}

@mixin compare-palette-key($key-palette-color, $value-palette-color, $keyword) {
  @for $i from 1 through list.length($keyword) {
    $item-list: list.nth($keyword, $i);
    @if (string.index(#{$key-palette-color}, $item-list)) {
      @include detect-color--palette(
        $keyword,
        $key-palette-color,
        $value-palette-color
      );
    }
  }
}
@mixin generate-color-classes($palette) {
  @each $key, $value in $palette {
    @include compare-palette-key($key, $value, colors.$borders);
    @include compare-palette-key($key, $value, colors.$colors);
    @include compare-palette-key($key, $value, colors.$backgrounds);
  }
}

@include generate-color-classes(colors.$color-palette);
