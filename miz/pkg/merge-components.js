import { readdirSync, statSync, readFileSync, writeFileSync, mkdirSync } from 'fs';
import { join, relative, dirname } from 'path';
import { fileURLToPath } from 'url';
import { config } from '../themes/scripts.js';
import chokidar from 'chokidar';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
// const rootDir = dirname(dirname(__dirname)); // Get the root directory (miz)
const projectRoot = process.cwd();
// const outputPath = join(projectRoot, config.output);

// Update this to use path.join instead of resolve
const themeDependencyPath = [
    "../sass/kernel/common/_aspect-ratio.scss",
    "../sass/kernel/common/_opacity.scss",
    "../sass/kernel/common/_z-index.scss",
    "../sass/kernel/kernel-functions/_colors.scss",
    "../sass/kernel/responsive/boots/_border.scss",
    "../sass/kernel/responsive/boots/_colors.scss",
    "../sass/structure/_borders.scss",
    "../themes/_index.scss",
].map(p => join(__dirname, p)); // path file for change use address with theme

// Function to create directory if it doesn't exist
function ensureDirectoryExists(dirPath) {
    try {
        mkdirSync(dirPath, { recursive: true });
    } catch (error) {
        if (error.code !== 'EEXIST') {
            throw error;
        }
    }
}

// Function to recursively find all js files in a directory
function findJsFiles(dir) {
    let jsFiles = [];
    const files = readdirSync(dir);

    files.forEach(file => {
        const filePath = join(dir, file);
        const stat = statSync(filePath);

        if (stat.isDirectory()) {
            jsFiles = jsFiles.concat(findJsFiles(filePath));
        } else if (file.endsWith('.js')) {
            jsFiles.push(filePath);
        }
    });

    return jsFiles;
}

// Function to read and merge js files
function mergeJsFiles() {
    const componentsDir = join(__dirname, '..', 'themes', config.theme, 'components');
    const jsFiles = findJsFiles(componentsDir);
    let mergedContent = '// Mizoon Theme Scripts\n';
    mergedContent += '// This file is automatically generated by merging all component scripts\n\n';

    jsFiles.forEach(file => {
        try {
            const content = readFileSync(file, 'utf8');
            mergedContent += `\n// File: ${relative(componentsDir, file)}\n`;
            mergedContent += content;
            mergedContent += '\n';
        } catch (error) {
            console.error(`Error reading file ${file}:`, error);
        }
    });

    return mergedContent;
}

// Function to write merged content to output file
function writeMergedContent() {
    // const outputPath = join(rootDir, config.output);
    const outputPath = join(projectRoot, config.output);
    ensureDirectoryExists(dirname(outputPath));
    const mergedContent = mergeJsFiles();
    writeFileSync(outputPath, mergedContent);
    updateUseStatements(themeDependencyPath);
    console.log(`All component scripts have been merged successfully to ${config.output}!`);
}

// Check if watch mode is enabled
const isWatchMode = process.argv.includes('--watch');

if (isWatchMode) {
    console.log('Watching for changes in component scripts...');
    const componentsDir = join(__dirname, '..', 'themes', config.theme, 'components');
    
    // Watch for changes in js files
    chokidar.watch(componentsDir, {
        ignored: /(^|[\/\\])\../, // ignore dotfiles
        persistent: true
    }).on('change', (path) => {
        if (path.endsWith('.js')) {
            console.log(`File ${path} has been changed`);
            writeMergedContent();
        }
    });
} else {
    // Run once
    writeMergedContent();
}

// Change address use in files
function updateUseStatements(files) {
    const useRegex = /@use ["']([^"']*themes\/)([^\/]+)(\/[^"']*)["'] as \*;/g;
    const forwardRegex = /@forward ["']([^"']+)["'];/g;

    files.forEach(filePath => {
        try {
            const originalContent = readFileSync(filePath, 'utf8');

            let updatedContent = originalContent.replace(useRegex, (match, prefix, oldThemeName, suffix) => {
                if (oldThemeName === config.theme) return match;
                const updatedPath = `"${prefix}${config.theme}${suffix}"`;
                return `@use ${updatedPath} as *;`;
            });

            updatedContent = updatedContent.replace(forwardRegex, (match, oldForwardPath) => {
                if (oldForwardPath === config.theme) return match;
                return `@forward "${config.theme}";`;
            });

            if (originalContent !== updatedContent) {
                writeFileSync(filePath, updatedContent);
                console.log(`Updated paths in ${filePath}`);
            }
        } catch (err) {
            console.error(`Error processing ${filePath}:`, err);
        }
    });
}